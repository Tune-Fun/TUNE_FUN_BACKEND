plugins {
    id 'idea'
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.asciidoctor.jvm.convert' version '4.0.2'
    id 'com.epages.restdocs-api-spec' version '0.19.2'
    id 'org.hidetake.swagger.generator' version '2.19.2'
}

group = 'com.tune_fun'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    asciidoctorExt
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://packages.atlassian.com/maven/repository/public' }
}

def jacocoExcludePatterns = [
        "**.domain.**.*",
        "**.common.**.*",
        "**.external.**.*",
        "**.oauth2.*",
        "**.application.port.**.*",
        "**.*Application*",
        "**.*Config*",
        "**.*Exception*",
        "**.*Filter*",
        "**.*Converter*",
        "**.*Entity*",
        "**.Q*",
        "**.*MapperImpl"
]

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('generated', file("src/main/generated"))
    set('docsDir', "src/main/resources/static/docs")
    set('jacocoDir', file("reports/"))
    set('springCloudVersion', "2023.0.0")
    set('testcontainersVersion', "1.19.7")
    set('awspringVersion', "3.1.0")
    set('awssdkVersion', "2.25.16")
    set('retrofitVersion', "2.11.0")
    set('jwtVersion', '0.12.5')
    set('queryDslVersion', "6.1")
    set('mapstructVersion', "1.5.5.Final")
}

dependencies {
    // Presentation Layer
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.giffing.bucket4j.spring.boot.starter:bucket4j-spring-boot-starter:0.10.3'
    implementation 'com.bucket4j:bucket4j-redis:8.7.1'
    implementation 'org.redisson:redisson-spring-boot-starter:3.26.0'
    implementation 'org.zalando:logbook-spring-boot-starter:3.7.2'

    // Persistence Layer
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation "io.github.openfeign.querydsl:querydsl-jpa-spring:${queryDslVersion}"
    implementation("io.github.openfeign.querydsl:querydsl-mongodb:${queryDslVersion}") {
        exclude group: 'org.mongodb', module: 'mongo-java-driver'
    }
    implementation 'org.mongodb.morphia:morphia:1.3.2'
    implementation "io.github.openfeign.querydsl:querydsl-collections:${queryDslVersion}"
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql:10.9.1'
    implementation 'org.postgresql:postgresql'

    // development
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

    // External
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'com.google.firebase:firebase-admin:9.2.0'
    implementation 'software.amazon.awssdk:s3'
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-secrets-manager'
    implementation 'com.amazonaws.secretsmanager:aws-secretsmanager-jdbc:2.0.2'
    implementation 'software.amazon.awssdk:kms'
    implementation 'com.amazonaws:aws-encryption-sdk-java:3.0.0'
    implementation 'software.amazon.cryptography:aws-cryptographic-material-providers:1.2.0'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.1.1'
    implementation 'com.slack.api:slack-app-backend:1.38.0'
    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.68.Final:osx-aarch_64'

    // Message Broker
    implementation 'io.awspring.cloud:spring-cloud-aws-sqs'
    implementation 'org.apache.kafka:kafka-streams'
    implementation 'org.springframework.kafka:spring-kafka'

    // Authentication, Authorization
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'org.bouncycastle:bcpkix-jdk18on:1.77'
    implementation 'org.bouncycastle:bcprov-jdk18on:1.77'
    implementation "io.jsonwebtoken:jjwt-api:${jwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jwtVersion}"

    // Boiler Plate
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    compileOnly 'org.projectlombok:lombok'
    implementation 'com.google.guava:guava:33.0.0-jre'
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    implementation 'org.apache.commons:commons-rng-simple:1.5'
    implementation 'commons-io:commons-io:2.15.1'
    implementation 'io.vavr:vavr:0.10.4'

    // API Documentation
    implementation 'com.epages:restdocs-api-spec-mockmvc:0.19.2'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    annotationProcessor(
            'org.springframework.boot:spring-boot-configuration-processor',
            "io.github.openfeign.querydsl:querydsl-jpa-spring:${queryDslVersion}",
            "io.github.openfeign.querydsl:querydsl-mongodb:${queryDslVersion}",
            'org.springframework.boot:spring-boot-starter-data-mongodb',
            'org.projectlombok:lombok',
            "org.mapstruct:mapstruct-processor:${mapstructVersion}",
            'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    )


    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'com.c4-soft.springaddons:spring-addons-oauth2-test:7.6.3'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.apache.commons:commons-lang3:3.13.0'
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.1.0' // Architecture Rule Test
    testImplementation "com.navercorp.fixturemonkey:fixture-monkey-starter:1.0.12" // Test Double
    testImplementation 'org.quickperf:quick-perf-junit5:1.1.0' // Performance Test
    testImplementation 'io.karatelabs:karate-junit5:1.5.0.RC3' // Both Test Pyramid
    testImplementation 'com.icegreen:greenmail-junit5:2.0.1'
    testImplementation 'io.awspring.cloud:spring-cloud-aws-starter-secrets-manager:3.1.0'

    testImplementation 'io.vavr:vavr-test:0.10.4'
    testImplementation 'org.awaitility:awaitility:4.2.1'
    testImplementation 'org.awaitility:awaitility-proxy:3.1.6'
    testImplementation 'org.junit-pioneer:junit-pioneer:2.2.0' // JUnit Extension
    testImplementation 'com.squareup.retrofit2:retrofit-mock'
    testImplementation 'com.atlassian.jira:jira-rest-java-client-core:5.2.7'
    testCompileOnly 'io.atlassian.fugue:fugue:5.0.0'

    testRuntimeOnly 'org.postgresql:postgresql'
    testCompileOnly 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:mongodb'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'org.testcontainers:localstack'
    testImplementation 'org.elasticmq:elasticmq-server_3:1.5.7'

    testAnnotationProcessor(
            'org.springframework.boot:spring-boot-configuration-processor',
            "io.github.openfeign.querydsl:querydsl-jpa-spring:${queryDslVersion}",
            "io.github.openfeign.querydsl:querydsl-mongodb:${queryDslVersion}",
            'org.springframework.boot:spring-boot-starter-data-mongodb',
            'org.projectlombok:lombok',
            "org.mapstruct:mapstruct-processor:${mapstructVersion}",
            'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    )

}

sourceSets {
    main.java.srcDirs += [generated]
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
            "-processor", 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor,' +
            'org.springframework.data.mongodb.repository.support.MongoAnnotationProcessor,' +
            'com.querydsl.apt.jpa.JPAAnnotationProcessor,' +
            'org.mapstruct.ap.MappingProcessor,' +
            'org.springframework.boot.configurationprocessor.ConfigurationMetadataAnnotationProcessor'
    ]
    options.annotationProcessorGeneratedSourcesDirectory(file(generated))
}

compileJava.doFirst {
    delete file(generated)
}

tasks.withType(GenerateSwaggerUI).configureEach {
    dependsOn 'openapi3'
}

bootRun {
    systemProperty 'spring.profiles.active', 'dev'
}

test {
    systemProperty 'spring.profiles.active', 'test_standalone'
    finalizedBy jacocoTestReport
    outputs.dir snippetsDir
    useJUnitPlatform()

    jacoco {
        excludes = jacocoExcludePatterns
    }
}

jacocoTestReport {
    dependsOn test    // 테스트가 수행되어야만 report를 생성할 수 있도록 설정
    reports {
        html.required.set(true)
        csv.required.set(true)
        html.destination file("jacoco/index.html")
        csv.destination file("jacoco/index.csv")
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: jacocoExcludePatterns)
                })
        )
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true

            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }

            excludes = jacocoExcludePatterns
        }
    }
}

openapi3 { // Swagger OAS Generate
    servers = [
            { url = "https://api.tunefun.net" },
            { url = "http://localhost:8080" }
    ]
    title = "Tune Fun REST API V1 Documentation"
    description = "Spring REST Docs with SwaggerUI."
    version = "${version}"
    outputFileNamePrefix = "${group}-open-api-3.0.1"
    format = 'json'

    outputDirectory = "${docsDir}"
}

postman { // Postman API Collection
    baseUrl = 'https://api.tunefun.net'
    title = 'Tune Fun REST API V1 Documentation'
    version = "${version}"
    outputFileNamePrefix = "${group}-postman-collection"

    outputDirectory = "${docsDir}"
}

asciidoctor {
    dependsOn test
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'

    sources {
        include("**/index.adoc")
    }

    baseDirFollowsSourceFile()

    doFirst {
        delete {
            file("${docsDir}")
        }
    }

    doLast {
        copy {
            from(file("build/docs/asciidoc"))
            into(file("${docsDir}"))
        }
    }
}

jar {
    enabled = false
}

bootJar {
    dependsOn 'asciidoctor'
    dependsOn 'openapi3'
    dependsOn 'postman'
    from("${docsDir}") {
        into "static/docs"
    }
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:${awspringVersion}"
        mavenBom "com.squareup.retrofit2:retrofit-bom:${retrofitVersion}"
        mavenBom "software.amazon.awssdk:bom:${awssdkVersion}"
    }
}
