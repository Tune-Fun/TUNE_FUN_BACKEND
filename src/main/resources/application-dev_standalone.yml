spring:
  datasource:
    url: jdbc:postgresql://localhost:5431/mydatabase
    username: myuser
    password: secret
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        use_sql_comments: false
        default_batch_fetch_size: 1000

  data:
    redis:
      host: localhost
      port: 6378
      repositories:
        enabled: false
    mongodb:
      uri: mongodb://localhost:27016/mydatabase
      host: localhost
      port: 27016
      database: mydatabase
      username: root
      password: secret
      authentication-database: admin
    jpa:
      repositories:
        bootstrap-mode: deferred

  thymeleaf:
    enabled: false

  flyway:
    enabled: false

  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${gmail-username}
    password: ${gmail-password}
    properties:
      mail:
        debug: true
        smtp:
          timeout: 5000
          auth: true
          starttls:
            enable: true
          ssl:
            enable: true
  config:
    import: aws-secretsmanager:tunefun_dev_secrets
  cloud:
    aws:
      secretsmanager:
        region: ap-northeast-2

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${google-oauth2-client-id}
            client-secret: ${google-oauth2-client-secret}
            redirect-uri: "https://api.tunefun.net/{action}/oauth2/code/{registrationId}"
            scope:
              - profile
              - email
          apple:
            client-name: Apple
            client-id: ${apple-oauth2-client-id}
            client-secret: ${apple-oauth2-client-secret}
            redirect-uri: "https://api.tunefun.net/{action}/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: POST
            scope:
              - name
              - email
          instagram:
            client-name: Instagram
            provider: instagram
            client-id: ${instagram-oauth2-client-id}
            client-secret: ${instagram-oauth2-client-secret}
            redirect-uri: "https://api.tunefun.net/{action}/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope:
              - user_profile
              - user_media
        provider:
          apple:
            authorization-uri: https://appleid.apple.com/auth/authorize?scope=name%20email&response_mode=form_post
            token-uri: https://appleid.apple.com/auth/token
          instagram:
            authorization-uri: https://api.instagram.com/oauth/authorize
            token-uri: https://api.instagram.com/oauth/access_token
  docker:
    compose:
      lifecycle-management: start_and_stop
  threads:
    virtual:
      enabled: true


jwt:
  access-token-validity: 3d
  refresh-token-validity: 30d
  secret: x/A?D(G+KbPeShVmYq3t6v9y$B&E)H@McQfTjWnZr4u7x!z%C*F-JaNdRgUkXp2s5v8y/B?D(G+KbPeShVmYq3t6w9z$C&F)H@McQfTjWnZr4u7x!A%D*G-KaNdRgUkX

event:
  sqs:
    send-vote-article-upload-notification:
      queue-name: send-vote-article-upload-notification
      message-group-id: send-vote-article-upload-notification
  kafka:
    send-vote-article-upload-notification:
      topic: send-vote-article-upload-notification

otp:
  validity: 3m

fcm:
  sdk-file: ${firebase-admin-credential}
  access-token: ${firebase-oauth2-token}
  project-id: tunefun-6edf5

apple:
  key-id: ${apple-key-id}
  team-id: ${apple-team-id}

spotify:
  client-id: ${spotify-client-id}
  client-secret: ${spotify-client-secret}

springdoc:
  default-consumes-media-type: application/json;charset=UTF-8
  default-produces-media-type: application/json;charset=UTF-8
  swagger-ui:
    url: /docs/com.tune_fun-open-api-3.0.1.json
