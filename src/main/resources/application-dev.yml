spring:
  docker:
    compose:
      enabled: false
  datasource:
    url: jdbc-secretsmanager:postgresql://tunefun-dev.cjgc0imyy7ak.ap-northeast-2.rds.amazonaws.com:5432/tunefun_dev
    username: rds!db-b4f88cec-869c-4e2e-a281-bdfc2280c8b3
    driver-class-name: com.amazonaws.secretsmanager.sql.AWSSecretsManagerPostgreSQLDriver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        use_sql_comments: false
        default_batch_fetch_size: 1000

  data:
    redis:
      host: ${redis-host}
      port: ${redis-port}
      username: ${redis-username}
      password: ${redis-password}
      database: ${redis-database}
    mongodb:
      host: ${mongodb-host}
      port: ${mongodb-port}
      database: tunefun
      username: ${mongodb-username}
      password: ${mongodb-password}
    jpa:
      repositories:
        bootstrap-mode: deferred

  thymeleaf:
    enabled: false

  flyway:
    enabled: false

  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${gmail-username}
    password: ${gmail-password}
    properties:
      mail:
        debug: true
        smtp:
          timeout: 5000
          auth: true
          starttls:
            enable: true
          ssl:
            enable: true
  config:
    import: aws-secretsmanager:tunefun_dev_secrets
  cloud:
    aws:
      secretsmanager:
        region: ap-northeast-2

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${google-oauth2-client-id}
            client-secret: ${google-oauth2-client-secret}
            scope:
              - profile
              - email
          apple:
            client-name: Apple
            client-id: ${apple-oauth2-client-id}
            client-secret: ${apple-oauth2-client-secret}
            redirect-uri: "${backend-rooturl-origin}/{action}/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: POST
            scope:
              - name
              - email
          instagram:
            client-name: Instagram
            provider: instagram
            client-id: ${instagram-oauth2-client-id}
            client-secret: ${instagram-oauth2-client-secret}
            redirect-uri: "${backend-rooturl-origin}/{action}/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope:
              - user_profile
              - user_media
        provider:
          apple:
            authorization-uri: https://appleid.apple.com/auth/authorize?scope=name%20email&response_mode=form_post
            token-uri: https://appleid.apple.com/auth/token
            jwk-set-uri: https://appleid.apple.com/auth/keys
          instagram:
            authorization-uri: https://api.instagram.com/oauth/authorize
            token-uri: https://api.instagram.com/oauth/access_token
  threads:
    virtual:
      enabled: true

jwt:
  access-token-validity: 3d
  refresh-token-validity: 30d
  secret: ${jwt-secret}

event:
  sqs:
    send-vote-article-upload-notification:
      queue-name: send-vote-article-upload-notification
      message-group-id: send-vote-article-upload-notification
  kafka:
    send-vote-article-upload-notification:
      topic: send-vote-article-upload-notification

otp:
  validity: 3m

fcm:
  sdk-file: ${firebase-admin-credential}
  access-token: ${firebase-oauth2-token}
  project-id: tunefun-6edf5

apple:
  key-id: ${apple-key-id}
  team-id: ${apple-team-id}
  oauth2-key: ${apple-oauth2-key}

spotify:
  client-id: ${spotify-client-id}
  client-secret: ${spotify-client-secret}

springdoc:
  default-consumes-media-type: application/json;charset=UTF-8
  default-produces-media-type: application/json;charset=UTF-8
  swagger-ui:
    url: /docs/com.tune_fun-open-api-3.0.1.json
