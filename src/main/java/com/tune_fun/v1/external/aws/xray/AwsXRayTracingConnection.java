package com.tune_fun.v1.external.aws.xray;

import com.amazonaws.xray.sql.TracingConnection;

import java.sql.*;

public class AwsXRayTracingConnection extends TracingConnection {

	public AwsXRayTracingConnection(Connection connection) {
		super(connection);
	}
	
    /**
     * Call {@code connection = TracingConnection.decorate(connection)} to decorate your {@link Connection} before any calls
     * to #createStatement, #prepareStatement or #prepareCall in order to have all your SQL queries recorded with an X-Ray Subsegment.
     *
     * @param connection the connection to decorate
     * @return a {@link Connection} that traces all SQL queries in X-Ray
     */
    public static Connection decorate(Connection connection) {
        return new AwsXRayTracingConnection(connection);
    }

    @Override
    public Statement createStatement() throws SQLException {
        return AwsXRayTracingStatement.decorateStatement(delegate.createStatement());
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return AwsXRayTracingStatement.decorateStatement(delegate.createStatement(resultSetType, resultSetConcurrency));
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return AwsXRayTracingStatement.decorateStatement(delegate.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability));
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return AwsXRayTracingStatement.decoratePreparedStatement(delegate.prepareStatement(sql), sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return AwsXRayTracingStatement.decoratePreparedStatement(delegate.prepareStatement(sql, autoGeneratedKeys), sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return AwsXRayTracingStatement.decoratePreparedStatement(delegate.prepareStatement(sql, columnIndexes), sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return AwsXRayTracingStatement.decoratePreparedStatement(delegate.prepareStatement(sql, columnNames), sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return AwsXRayTracingStatement.decoratePreparedStatement(delegate.prepareStatement(sql, resultSetType, resultSetConcurrency), sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return AwsXRayTracingStatement.decoratePreparedStatement(delegate.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability), sql);
    }

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        return AwsXRayTracingStatement.decorateCallableStatement(delegate.prepareCall(sql), sql);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return AwsXRayTracingStatement.decorateCallableStatement(delegate.prepareCall(sql, resultSetType, resultSetConcurrency), sql);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return AwsXRayTracingStatement.decorateCallableStatement(delegate.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability), sql);
    }

}
